{"version":3,"sources":["services/api.js","components/loadinGliph.jsx","components/albumCard.jsx","components/songCard.jsx","components/resultsGrid.jsx","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["handlErrors","response","ok","Error","statusText","fetchItems","term","entity","limit","fetch","then","json","LoadingIcon","alt","src","width","AlbumCard","state","playing","played","loaded","handlePlayState","setState","handleProgress","this","props","item","artistName","artworkUrl100","collectionName","copyright","country","releaseDate","trackCount","collectionViewUrl","primaryGenreName","className","replace","role","aria-label","href","target","rel","slice","React","Component","SongCard","previewUrl","trackName","trackNumber","trackViewUrl","onClick","max","value","url","height","onProgress","ResultsGrid","items","type","map","result","key","trackID","length","Search","useState","name","category","search","setSearch","loading","setLoading","data","setData","makeRequest","a","results","htmlFor","placeholder","onChange","e","min","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2aac9c1a.chunk.js","sourcesContent":["// const axios = require('axios').default;\r\n\r\nfunction handlErrors(response) {\r\n  if (!response.ok) {\r\n    throw Error(response.statusText);\r\n  }\r\n  return response;\r\n}\r\n\r\n// export const fetchItems = async (term, entity) => {\r\n//   await axios.get(`https://itunes.apple.com/search?term=${term}&entity=${entity}`)\r\n//     .then(handlErrors)\r\n//     .then((response) =>  console.log(response.results))\r\n// };\r\n\r\nexport const fetchItems = (term, entity, limit) => {\r\n  return fetch(`\r\n    https://itunes.apple.com/search?term=${term}&entity=${entity}&limit=${limit}`)\r\n    .then(handlErrors)\r\n    .then((response) => response.json())\r\n}","import React from 'react';\r\n\r\nfunction LoadingIcon() {\r\n  return (\r\n    <div>\r\n      <img\r\n        alt=\"Carregando\"\r\n        src=\"media/wloadinghourglass.gif\"\r\n        width=\"100px\"\r\n      />\r\n      <h3>Carregamento</h3>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default LoadingIcon;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './cardstyles.css';\r\n\r\nclass AlbumCard extends React.Component {\r\n  state = {\r\n    playing: false,\r\n    played: 0,\r\n    loaded: 0,\r\n  };\r\n\r\n  handlePlayState = () => {\r\n    this.setState({ playing: !this.state.playing })\r\n  };\r\n\r\n  handleProgress = state => this.setState(state)\r\n\r\n  render() {\r\n    const {\r\n      artistName,\r\n      artworkUrl100,\r\n      collectionName,\r\n      copyright,\r\n      country,\r\n      releaseDate,\r\n      trackCount,\r\n      collectionViewUrl,\r\n      primaryGenreName,\r\n     } = this.props.item;\r\n\r\n     return (\r\n      <div className=\"album-card\">\r\n        <img className=\"track-album-cover\"\r\n          alt=\"Capa do álbum\"\r\n          src={(artworkUrl100.replace('100x100','800x800'))}\r\n          width=\"350px\"\r\n        />\r\n        <div className=\"track-info\">\r\n          <h2>{collectionName}</h2>\r\n          <h3><span role=\"img\" aria-label=\"artist\">🎤</span> {artistName}</h3>\r\n          <h4>            \r\n            <a\r\n              href={collectionViewUrl}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              <span role=\"img\" aria-label=\"site\">🌐</span>\r\n            </a>\r\n          </h4>\r\n          <h4>Faixas: {trackCount} - Ano: {releaseDate.slice(0,4)}</h4>\r\n          <h4>Gênero: {primaryGenreName} - País: {country}</h4>\r\n          <h4>{copyright}</h4>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nAlbumCard.propTypes = {\r\n  item: PropTypes.shape({\r\n    collectionName: PropTypes.string.isRequired,\r\n    trackName: PropTypes.string.isRequired,\r\n    artistName: PropTypes.string.isRequired,\r\n    previewUrl: PropTypes.string.isRequired,\r\n    artworkUrl100: PropTypes.string.isRequired,\r\n    trackNumber: PropTypes.number.isRequired,\r\n    trackCount: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default AlbumCard;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactPlayer from 'react-player';\r\nimport './cardstyles.css';\r\n\r\nclass SongCard extends React.Component {\r\n  state = {\r\n    playing: false,\r\n    played: 0,\r\n    loaded: 0,\r\n  };\r\n\r\n  handlePlayState = () => {\r\n    this.setState({ playing: !this.state.playing })\r\n  };\r\n\r\n  handleProgress = state => this.setState(state)\r\n\r\n  render() {\r\n    const {\r\n      artistName,\r\n      artworkUrl100,\r\n      collectionName,\r\n      previewUrl,\r\n      releaseDate,\r\n      trackName,\r\n      trackNumber,\r\n      trackCount,\r\n      trackViewUrl,\r\n      primaryGenreName,\r\n     } = this.props.item;\r\n\r\n     const { playing, played } = this.state;\r\n\r\n     return (\r\n      <div className=\"track-card\">\r\n        <img className=\"track-album-cover\"\r\n          alt=\"Capa do álbum\"\r\n          src={(artworkUrl100.replace('100x100','600x600'))}\r\n          // src={artworkUrl100}\r\n          width=\"250px\"\r\n        />\r\n        <div className=\"track-info\">\r\n          <h3><span role=\"img\" aria-label=\"artist\">🎤</span> {artistName}</h3>\r\n          <h3><span role=\"img\" aria-label=\"name\">🎵</span> {trackName}</h3>\r\n          <h4>\r\n            <span onClick={this.handlePlayState} role=\"img\">{ playing ?  '⏹' : '▶' }</span>\r\n            <a\r\n              href={trackViewUrl}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              <span role=\"img\" aria-label=\"site\">🌐</span>\r\n            </a>\r\n          </h4>\r\n          <h3><span role=\"img\" aria-label=\"album\">💿 {collectionName}</span></h3>\r\n          <h4>Faixa {trackNumber}/{trackCount} - Ano: {releaseDate.slice(0,4)}</h4>\r\n          <h4>Gênero: {primaryGenreName}</h4>\r\n          <progress max={1} value={played} />\r\n          <ReactPlayer\r\n            url={previewUrl}\r\n            width=\"0\"\r\n            height=\"0\"\r\n            playing={playing}\r\n            onProgress={this.handleProgress}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSongCard.propTypes = {\r\n  item: PropTypes.shape({\r\n    collectionName: PropTypes.string.isRequired,\r\n    trackName: PropTypes.string.isRequired,\r\n    artistName: PropTypes.string.isRequired,\r\n    previewUrl: PropTypes.string.isRequired,\r\n    artworkUrl100: PropTypes.string.isRequired,\r\n    trackNumber: PropTypes.number.isRequired,\r\n    trackCount: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default SongCard;\r\n","import React from 'react';\r\nimport AlbumCard from './albumCard';\r\nimport SongCard from './songCard';\r\n\r\n// import { mockedResults } from '../mock';\r\n\r\nfunction ResultsGrid({items, type}) {\r\n  switch (type) {\r\n    case \"musicTrack\":\r\n      return items.map((result) => <SongCard key={result.trackID} item={result} />)\r\n    case \"album\":\r\n      return items.map((result) => <AlbumCard key={result.trackID} item={result} />)\r\n    default:\r\n      return <div>Exibindo {items.length} resultados</div>;\r\n  }\r\n}\r\n\r\nexport default ResultsGrid;\r\n","import React, { useState } from 'react';\nimport { fetchItems } from '../services/api';\nimport LoadingIcon from './loadinGliph';\nimport ResultsGrid from './resultsGrid';\nimport './Search.css';\n\nfunction Search() {\n  const [search, setSearch] = useState({\n    name: '',\n    category: 'musicTrack',\n    limit: 33\n  });\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState([]);\n\n  const makeRequest = async () => {\n    setLoading(true);\n    const { name, category, limit } = search;\n    const { results } = await fetchItems(name, category, limit);\n    setData(results);\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"search-bar\">\n      <header></header>\n      <div className=\"search-panel\">\n        <label htmlFor=\"searchbox\">Termo</label>\n        <input\n          name=\"searchBox\"\n          type=\"text\"\n          placeholder=\"Ex.: Oasis\"\n          onChange={e => setSearch({ ...search, name: e.target.value })}\n        />\n        <label htmlFor=\"mediaType\">Tipo de mídia</label>\n        <select\n          name=\"mediaType\"\n          onChange={e => setSearch({ ...search, category: e.target.value })}\n        >\n          <option value='musicTrack'>Faixa</option>\n          <option value='musicArtist'>Artista</option>\n          <option value='album'>Álbum</option>\n          <option value='musicVideo'>Clipe</option>\n          <option value='mix'>Remix</option>\n        </select>\n        <label htmlFor=\"resultCount\">Máx. resultados</label>\n        <input\n          name=\"resultCount\"\n          type=\"number\"\n          min=\"9\"\n          max=\"200\"\n          value={search.limit}\n          onChange={e => setSearch({ ...search, limit: e.target.value })}\n        />\n        <button onClick={makeRequest}>Procurar</button>\n      </div>\n      <div className=\"results\">\n        { loading ?\n          <LoadingIcon /> :\n          <ResultsGrid items={data} type={search.category} />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n","import React from 'react';\n// import { Route, Router } from 'react-router-dom';\nimport Search from './components/Search';\n\n\nfunction App() {\n  return (\n    <center>\n      <Search />\n      {/* <Router>\n        <Route exact path=\"/search\" component={Search}/>\n      </Router> */}\n    </center>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}